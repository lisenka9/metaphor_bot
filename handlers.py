from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler
from database import db 
from config import ADMIN_IDS
import logging
import keyboard

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logging.info(f"New user: ID={user.id}, Name={user.first_name}, "
                 f"Username=@{user.username}, LastName={user.last_name}")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π None –∑–Ω–∞—á–µ–Ω–∏–π
    db.get_or_create_user(
        user_id=user.id,
        username=user.username or "",  # –ï—Å–ª–∏ username None - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        first_name=user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",  # –ï—Å–ª–∏ first_name None
        last_name=user.last_name or ""  # –ï—Å–ª–∏ last_name None
    )
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if user.username:
        greeting = f"–ü—Ä–∏–≤–µ—Ç, @{user.username}! üëã"
    else:
        greeting = f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã"
    
    welcome_text = f"""
{greeting}

–Ø - –±–æ—Ç –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Å–≤–æ—é –∫–∞—Ä—Ç—É –¥–Ω—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–∂–µ—Ç –∑–∞–¥—É–º–∞—Ç—å—Å—è –æ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏.

‚ú® –ö–æ–º–∞–Ω–¥—ã:
/daily - –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è
/profile - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/help - –ü–æ–º–æ—â—å
/history - –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∫–∞—Ä—Ç

üé¥ –ö–∞—Ä—Ç–∞ –¥–Ω—è - —ç—Ç–æ —Å–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–∞ –∏–∑ –∫–æ–ª–æ–¥—ã, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å, –Ω–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è.
    """
    
    await update.message.reply_text(welcome_text)

async def daily_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /daily —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç–æ–π"""
    user = update.effective_user
    
    can_take, reason = db.can_take_daily_card(user.id)
    
    if not can_take:
        await update.message.reply_text(f"‚ùå {reason}")
        return
    
    card = db.get_random_card()
    if not card:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã.")
        return
    
    card_id, card_name, image_url, description = card
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['last_card'] = {
        'card_id': card_id,
        'card_name': card_name,
        'image_url': image_url
    }
    
    card_text = f"""‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è: {card_name}

–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... 
–ö–∞–∫–∏–µ –ø–µ—Ä–≤—ã–µ –æ—â—É—â–µ–Ω–∏—è?"""
    
    try:
        await update.message.reply_photo(
            photo=image_url,  
            caption=card_text,
            reply_markup=keyboard.get_card_keyboard(),  # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
            parse_mode='Markdown'
        )
        
        db.record_user_card(user.id, card_id)
        
    except Exception as e:
        await update.message.reply_text(
            f"‚ú® –ö–∞—Ä—Ç–∞ –¥–Ω—è: {card_name}**\n\n{card_text}",
            reply_markup=keyboard.get_card_keyboard(),  # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
            parse_mode='Markdown'
        )
        db.record_user_card(user.id, card_id)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å –∫–∞—Ä—Ç—É'"""
    query = update.callback_query
    await query.answer()  # –≤–∞–∂–Ω–æ - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ
    
    user_data = context.user_data
    last_card = user_data.get('last_card', {})
    
    if query.data == "flip_card":
        questions_text = f"""üé¥ {last_card['card_name']}

üëÅ –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è:

‚Äî –ö–∞–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–∞?
‚Äî –ö–∞–∫–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—Å–ø–ª—ã–ª–æ?
‚Äî –ö–∞–∫–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ —ç–º–æ—Ü–∏—è –ø—Ä–∏—à–ª–∏ –ø–µ—Ä–≤—ã–º–∏?  
‚Äî –ö–∞–∫ —Å–∏–º–≤–æ–ª–∏–∫–∞ –∫–∞—Ä—Ç—ã –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –≤–∞–º —Å–µ–≥–æ–¥–Ω—è?

üí≠ –° –∫–∞–∫–∏–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —É –≤–∞—Å –∞—Å—Å–æ—Ü–∏–∏—Ä—É–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?

‚ú® –í —Ä–∞–±–æ—Ç–µ —Å –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏ –Ω–µ—Ç ¬´–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö¬ª –æ—Ç–≤–µ—Ç–æ–≤ ‚Äî –≤–∞–∂–µ–Ω –≤–∞—à –ª–∏—á–Ω—ã–π —Å–º—ã—Å–ª, —Ä–æ–∂–¥–∞—é—â–∏–π—Å—è –≤ –º–æ–º–µ–Ω—Ç –≤—Å—Ç—Ä–µ—á–∏ —Å –æ–±—Ä–∞–∑–æ–º."""
        
        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
        await query.edit_message_caption(
            caption=questions_text,
            reply_markup=None,  # —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            parse_mode='Markdown'
        )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/daily - –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è
/profile - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ª–∏–º–∏—Ç—ã
/history - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤—Å–µ—Ö –≤–∞—à–∏—Ö –∫–∞—Ä—Ç
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

‚ùì –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?
- –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ–¥–Ω—É —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É
- –ö–∞—Ä—Ç–∞ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –∏–∑ –∫–æ–ª–æ–¥—ã —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
- –í—ã –º–æ–∂–µ—Ç–µ —Ä–∞–∑–º—ã—à–ª—è—Ç—å –Ω–∞–¥ –∑–Ω–∞—á–µ–Ω–∏–µ–º –∫–∞—Ä—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≤–∞—à–µ–π –∂–∏–∑–Ω–∏

üí° –°–æ–≤–µ—Ç: –ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É —Å–ª–∏—à–∫–æ–º —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ. 
–î–∞–π—Ç–µ –æ–±—Ä–∞–∑—É –≤–æ–π—Ç–∏ –≤ –≤–∞—à–µ —Å–æ–∑–Ω–∞–Ω–∏–µ, –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø–µ—Ä–≤—ã–µ –º—ã—Å–ª–∏ –∏ —á—É–≤—Å—Ç–≤–∞.
    """
    
    await update.message.reply_text(help_text)

    
async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile"""
    user = update.effective_user
    
    stats = db.get_user_stats(user.id)
    
    if not stats:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        return
    
    limit, is_premium, total_cards, reg_date = stats
    
    profile_text = f"""
üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å

üìä –í—Å–µ–≥–æ –∫–∞—Ä—Ç –ø–æ–ª—É—á–µ–Ω–æ: {total_cards}
üéØ –õ–∏–º–∏—Ç –∫–∞—Ä—Ç –≤ –¥–µ–Ω—å: {limit}
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg_date}
    """
    
    await update.message.reply_text(profile_text)

async def reset_my_limit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–æ—Å —Å–≤–æ–µ–≥–æ –ª–∏–º–∏—Ç–∞ –∫–∞—Ä—Ç (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    user = update.effective_user
    
    try:
        conn = db.get_connection()
        cursor = conn.cursor()
        # –ò–°–ü–†–ê–í–õ–ï–ù–û –¥–ª—è PostgreSQL
        cursor.execute('UPDATE users SET last_daily_card_date = NULL WHERE user_id = %s', (user.id,))
        conn.commit()
        conn.close()
        
        await update.message.reply_text("‚úÖ –í–∞—à –ª–∏–º–∏—Ç —Å–±—Ä–æ—à–µ–Ω! –ú–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –≤–∑—è—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è.")
        
    except Exception as e:
        logging.error(f"‚ùå Error resetting limit: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ª–∏–º–∏—Ç–∞")

async def debug_db(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    user = update.effective_user
    
    try:
        conn = db.get_connection()
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ PostgreSQL - –ò–°–ü–†–ê–í–õ–ï–ù–û
        cursor.execute('''
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
        ''')
        tables = [table[0] for table in cursor.fetchall()]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ò–°–ü–†–ê–í–õ–ï–ù–û –¥–ª—è PostgreSQL
        cursor.execute('SELECT * FROM users WHERE user_id = %s', (user.id,))
        user_data = cursor.fetchone()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ä—Ç—ã - –ò–°–ü–†–ê–í–õ–ï–ù–û –¥–ª—è PostgreSQL
        cursor.execute('SELECT COUNT(*) FROM user_cards WHERE user_id = %s', (user.id,))
        user_cards_count = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM cards')
        total_cards_count = cursor.fetchone()[0]
        
        debug_text = f"""
üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:

üìã –¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ: {tables}
üë§ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ: {'‚úÖ –ï—Å—Ç—å' if user_data else '‚ùå –ù–µ—Ç'}
üé¥ –í–∞—à–∏—Ö –∫–∞—Ä—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏: {user_cards_count}
üÉè –í—Å–µ–≥–æ –∫–∞—Ä—Ç –≤ –∫–æ–ª–æ–¥–µ: {total_cards_count}
        """
        
        await update.message.reply_text(debug_text)
        conn.close()
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {e}")


async def history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)"""
    user = update.effective_user
    
    try:
        history = db.get_user_card_history(user.id, limit=20)
        
        if not history:
            await update.message.reply_text(
                "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞—Ä—Ç.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /daily —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É!"
            )
            return
        
        if len(history) > 5:
            history_text = f"üìö –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∫–∞—Ä—Ç –∏–∑ {len(history)}:\n\n"
            history = history[:5]
        else:
            history_text = f"üìö –í–∞—à–∏ –∫–∞—Ä—Ç—ã ({len(history)}):\n\n"
        
        for i, (card_id, card_name, image_url, description, drawn_date) in enumerate(history, 1):
            if isinstance(drawn_date, str):
                date_str = drawn_date[:10]
            else:
                date_str = drawn_date.strftime("%d.%m.%Y")
            
            history_text += f"{i}. {card_name} - {date_str}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = [
            [InlineKeyboardButton("üñº –ü–æ–∫–∞–∑–∞—Ç—å —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏", callback_data="show_history_pics")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        history_text += "\nüí´ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∫–∞—Ä—Ç"
        
        await update.message.reply_text(
            history_text, 
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logging.error(f"‚ùå Error in history command: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏")


async def history_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏—Å—Ç–æ—Ä–∏–∏"""
    if context.args and context.args[0].lower() == "pics":
        await history_album(update, context)
    else:
        await history(update, context)

async def history_album(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò—Å—Ç–æ—Ä–∏—è –≤ –≤–∏–¥–µ –∞–ª—å–±–æ–º–∞ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)"""
    user = update.effective_user
    
    try:
        history = db.get_user_card_history(user.id, limit=5)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –∞–ª—å–±–æ–º–∞
        
        if not history:
            await update.message.reply_text(
                "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞—Ä—Ç.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /daily —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É!"
            )
            return
        
        from telegram import InputMediaPhoto
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
        media_group = []
        
        for i, (card_id, card_name, image_url, description, drawn_date) in enumerate(history, 1):
            if isinstance(drawn_date, str):
                date_str = drawn_date[:10]
            else:
                date_str = drawn_date.strftime("%d.%m.%Y")
            
            caption = f"#{i} {card_name} - {date_str}"
            
            media_group.append(
                InputMediaPhoto(
                    media=image_url,
                    caption=caption
                )
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º
        await update.message.reply_media_group(media=media_group)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        stats = db.get_user_stats(user.id)
        total_cards = stats[2] if stats else 0
        await update.message.reply_text(
            f"üé¥ –í—Å–µ–≥–æ –∫–∞—Ä—Ç –ø–æ–ª—É—á–µ–Ω–æ: {total_cards}\n"
            f"üí´ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /daily –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã"
        )
        
    except Exception as e:
        logging.error(f"‚ùå Error in history album: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥
        await simple_history_with_images(update, context)

async def simple_history_with_images(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞—è –∏—Å—Ç–æ—Ä–∏—è —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ (–ø–æ –æ–¥–Ω–æ–π)"""
    user = update.effective_user
    
    try:
        history = db.get_user_card_history(user.id, limit=5)
        
        if not history:
            await update.message.reply_text(
                "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞—Ä—Ç.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /daily —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É!"
            )
            return
        
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        history_text = f"üìö **–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(history)} –∫–∞—Ä—Ç:**\n\n"
        
        for i, (card_id, card_name, image_url, description, drawn_date) in enumerate(history, 1):
            if isinstance(drawn_date, str):
                date_str = drawn_date[:10]
            else:
                date_str = drawn_date.strftime("%d.%m.%Y")
            
            history_text += f"{i}. **{card_name}** - {date_str}\n"
        
        await update.message.reply_text(history_text, parse_mode='Markdown')
        
        # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ –æ–¥–Ω–æ–π
        for i, (card_id, card_name, image_url, description, drawn_date) in enumerate(history, 1):
            if isinstance(drawn_date, str):
                date_str = drawn_date[:10]
            else:
                date_str = drawn_date.strftime("%d.%m.%Y")
            
            caption = f"#{i} **{card_name}** - {date_str}"
            
            try:
                await update.message.reply_photo(
                    photo=image_url,
                    caption=caption,
                    parse_mode='Markdown'
                )
            except Exception as e:
                logging.error(f"Error sending history image {i}: {e}")
                # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                await update.message.reply_text(
                    f"#{i} **{card_name}** - {date_str}\n(–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)"
                )
        
    except Exception as e:
        logging.error(f"‚ùå Error in simple history: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏")


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()  # –≤–∞–∂–Ω–æ - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ
    
    user_data = context.user_data
    last_card = user_data.get('last_card', {})
    
    if query.data == "flip_card":
        questions_text = f"""üé¥ {last_card['card_name']}

üëÅ –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è:

‚Äî –ö–∞–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–∞?
‚Äî –ö–∞–∫–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—Å–ø–ª—ã–ª–æ?
‚Äî –ö–∞–∫–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ —ç–º–æ—Ü–∏—è –ø—Ä–∏—à–ª–∏ –ø–µ—Ä–≤—ã–º–∏?  
‚Äî –ö–∞–∫ —Å–∏–º–≤–æ–ª–∏–∫–∞ –∫–∞—Ä—Ç—ã –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –≤–∞–º —Å–µ–≥–æ–¥–Ω—è?

üí≠ –° –∫–∞–∫–∏–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —É –≤–∞—Å –∞—Å—Å–æ—Ü–∏–∏—Ä—É–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?

‚ú® –í —Ä–∞–±–æ—Ç–µ —Å –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏ –Ω–µ—Ç ¬´–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö¬ª –æ—Ç–≤–µ—Ç–æ–≤ ‚Äî –≤–∞–∂–µ–Ω –≤–∞—à –ª–∏—á–Ω—ã–π —Å–º—ã—Å–ª, —Ä–æ–∂–¥–∞—é—â–∏–π—Å—è –≤ –º–æ–º–µ–Ω—Ç –≤—Å—Ç—Ä–µ—á–∏ —Å –æ–±—Ä–∞–∑–æ–º."""
        
        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
        await query.edit_message_caption(
            caption=questions_text,
            reply_markup=None,  # —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            parse_mode='Markdown'
        )
    
    elif query.data == "show_history_pics":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
        user = query.from_user
        await query.edit_message_reply_markup(reply_markup=None)  # —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É
        await history_album_from_query(query, context)

async def history_album_from_query(query, context: ContextTypes.DEFAULT_TYPE):
    """–ò—Å—Ç–æ—Ä–∏—è —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ –¥–ª—è callback query"""
    user = query.from_user
    
    try:
        history = db.get_user_card_history(user.id, limit=5)
        
        if not history:
            await query.message.reply_text("üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞—Ä—Ç.")
            return
        
        from telegram import InputMediaPhoto
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
        media_group = []
        
        for i, (card_id, card_name, image_url, description, drawn_date) in enumerate(history, 1):
            if isinstance(drawn_date, str):
                date_str = drawn_date[:10]
            else:
                date_str = drawn_date.strftime("%d.%m.%Y")
            
            caption = f"#{i} {card_name} - {date_str}"
            
            media_group.append(
                InputMediaPhoto(
                    media=image_url,
                    caption=caption
                )
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º
        await query.message.reply_media_group(media=media_group)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = db.get_user_stats(user.id)
        total_cards = stats[2] if stats else 0
        await query.message.reply_text(
            f"üé¥ –í—Å–µ–≥–æ –∫–∞—Ä—Ç –ø–æ–ª—É—á–µ–Ω–æ: {total_cards}\n"
        )
        
    except Exception as e:
        logging.error(f"‚ùå Error in history album from query: {e}")
        await query.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏")
