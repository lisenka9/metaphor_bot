import logging
import os
from telegram.ext import Application, CommandHandler, MessageHandler, filters
from config import BOT_TOKEN
import handlers
from database import db
# –î–æ–±–∞–≤—å—Ç–µ –≤ bot.py –ø–µ—Ä–µ–¥ application.run_polling()
from flask import Flask
from threading import Thread
import psycopg2
import os

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
migration_app = Flask('')

@migration_app.route('/migrate')
def migrate_data():
    try:
        # –í–∞—à –∫–æ–¥ –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–¥–µ—Å—å
        railway_url = os.environ.get('RAILWAY_DB_URL')
        render_url = os.environ.get('DATABASE_URL')
        
        if not railway_url or not render_url:
            return "‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–∞–º
        old_conn = psycopg2.connect(railway_url)
        old_cursor = old_conn.cursor()
        new_conn = psycopg2.connect(render_url)
        new_cursor = new_conn.cursor()
        
        # –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        old_cursor.execute('SELECT * FROM users')
        users = old_cursor.fetchall()
        user_count = len(users)
        
        for user in users:
            new_cursor.execute('''
                INSERT INTO users 
                (user_id, username, first_name, last_name, registered_date, daily_cards_limit, last_daily_card_date, is_premium)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
                ON CONFLICT (user_id) DO NOTHING
            ''', user)
        
        # –ú–∏–≥—Ä–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–∞—Ä—Ç
        old_cursor.execute('SELECT * FROM user_cards')
        user_cards = old_cursor.fetchall()
        card_count = len(user_cards)
        
        for card in user_cards:
            new_cursor.execute('''
                INSERT INTO user_cards (id, user_id, card_id, drawn_date)
                VALUES (%s, %s, %s, %s)
                ON CONFLICT (id) DO NOTHING
            ''', card)
        
        new_conn.commit()
        
        return f"""
        ‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!
        üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: {user_count}
        üé¥ –ó–∞–ø–∏—Å–µ–π –∫–∞—Ä—Ç –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: {card_count}
        """
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {str(e)}"

def run_migration_server():
    migration_app.run(host='0.0.0.0', port=5000)

# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
migration_thread = Thread(target=run_migration_server)
migration_thread.daemon = True
migration_thread.start()

print("üöÄ –°–µ—Ä–≤–µ—Ä –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5000")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def main():
    BOT_TOKEN = os.environ.get('BOT_TOKEN')
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN not found in environment variables!")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    db.init_database()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ä—Ç—ã –≤ –±–∞–∑–µ
    if not db.check_cards_exist():
        logger.warning("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∫–∞—Ä—Ç!")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", handlers.start))
    application.add_handler(CommandHandler("daily", handlers.daily_card))
    application.add_handler(CommandHandler("profile", handlers.profile))
    application.add_handler(CommandHandler("help", handlers.help_command))
    application.add_handler(CommandHandler("resetme", handlers.reset_my_limit))
    application.add_handler(CommandHandler("debug", handlers.debug_db))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, 
                                         handlers.help_command))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Railway...")
    application.run_polling()

if __name__ == '__main__':
    main()
